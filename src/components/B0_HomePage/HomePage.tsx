import React from "react";
import style from "./HomePage.module.scss"

export const HomePage = () => {
    return (
        <div className={style.homePage}>
            <h1>Аутентификация на основе сессий</h1>
            <p className={style.step}>
                {
                    `При первом запросе клиента на сервер создается сессия и хранилице данных сессии на сервере (в этом проекте хранилище оперативной памяти Redis). 
                    Далее сервер создает httpOnly куки (нельзя прочитать из js кода клиента), который добавляется в ответ клиенту и затем добавляется в каждый запрос клиента на сервер.
                    В этой куке содержится идентификатор сессии, который будучи прочитан на сервере, связывает последующий запросы клиента с сессией, между собой 
                    (как запросы от одного конкретнго клиента), с этим клиентом.`
                }
            </p>
            <h2 style={{marginTop: 16}}>Этапы аутентификации</h2>
            <p className={style.step}>
                <span>Регистрация (registration, sign-up). </span>
                {
                    `На клиента заполняется форма с login, email и password и отправляется post-запросом на сервер. 
                    Сервер валидирует данные (уникальность, формат), кодирует пароль и создает в БД для пользователей запись 
                    с login, email и кодированным паролем.`
                }
            </p>
            <p className={style.step}>
                <span>Логин (login, sign-in, вход, аутентификация). </span>
                {
                    `На клиента заполнятся форма с email и password и отправляется post-запросом на сервер. 
                    Сервер ищет по этим данным запись в БД для пользователей, проверяет совпадение паролей 
                    и записывает в сессию id клиента. Наличие в сессии этого ключа будет указывать на то, что пользователь залогинился.
                    Также при наличие ролевой системы пользователей (владелей сайта, админ, субадмин, просто пользователь), 
                    в сессию записывается роль role залогиненного пользователя, которая будет проверятся при авторизованном запросе клиента на сервер.                    
                    `
                }
            </p>
            <p className={style.step}>
                <span>Аутентифицированный (авторизованный) запрос клиента. </span>
                {
                    `При любом запросе, требующем того, что клиент должен быть аутентифицированным или авторизованным 
                    проверяются наличие и значение переменных id и role в сессии и на основании этого запрос обрабатывается 
                    или возвращается ошибка.
                    `
                }
            </p>
            <p className={style.step}>
                <span>Логаут (выход). </span>
                {
                    `
                        С клиента отправляется запрос на сервер, сервер уничтожает сессию. После этого любые аутентифицированные 
                        или авторизованные запросы будут возвращать ошибку. При последующем запросе клиента на сервер сессия создается снова,
                         но уже без id и role.
                    `
                }
            </p>
        </div>
    )
}
